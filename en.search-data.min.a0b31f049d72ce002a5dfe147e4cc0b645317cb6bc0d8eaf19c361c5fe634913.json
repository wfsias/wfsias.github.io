[{"id":0,"href":"/docs/shortcodes/buttons/","title":"Chapter 1： 树","section":"Shortcodes","content":"树 #   树定义（以递归的方式）：专业定义：1、有且只有一个称为根的节点 2、有若干个互不相交的子树，这些子树本身也是一个数 通俗：树是由节点和边（指针）组成的 2、每个节点只有一个父节点，但可以有多个子节点 3、但有一个节点例外，该节点没有父节点，该节点被称为根节点 专业术语：节点 父节点 字节点 子孙 堂兄弟 深度：从根节点到最底层节点的层数称之为深度（根节点是第一层） 叶子节点：没有子节点的节点 非终端节点==非叶子节点（有子节点的节点） 度：子节点的个数称为度  树分类（初步） #   一般树：任意一个子节点的个数都不受限制 二叉树：任意一个子节点的个数最多两个，且子节点的位置不可更改  二叉树更详细的分类：  一般二叉树 满二叉树：在不增加树的层数的情况下，无法多再添加一个节点的二叉树就是满二叉树 完全二叉树：如果只是删除了满二叉树最底层最右边的连续若干个节点，这样形成的二叉树就是完全二叉树     森林：n个互不相干的树的集合  树存储： #    二叉树的存储：\n 连续存储【完全二叉树】  优点：查找某个节点的父节点和子节点（也包括判断有没有子节点）速度很快 缺点：耗用内存空间过大   链式存储    一般树的存储\n 双亲表示法  求父节点方便   孩子表示法  求子节点表示法   双亲孩子表示法  求父节点和字节点都很方便   二叉树表示法  把一个普通树转化成二叉树来存储  具体转化方法：设法保证任意一个节点的左指针域只想它的第一个孩子，右指针指向它的兄弟，只要能满足这个条件，就可以把一个普通树转化为一个二叉树  一个普通树转化成的二叉树一定没有右子树       森林的存储  先把森林转化为二叉树，再存储二叉树      树操作 #   树操作（通常指二叉树）  遍历  先序遍历  先访问根节点 再先序访问左子树 再先序访问右子树   中序遍历  中序遍历左子树 再访问根节点 再中序遍历右子树   后序遍历  后序遍历左子树 后序遍历右子树 再访问根节点     已知两种遍历序列求原始二叉树   通过先序和中序 或者 中序和后序我们可以还原出原始的二叉树 但是通过先序和后序我们无法还原出原始的二叉树  已知先序和中序求后序  实例一  先序：ABCDEFGH 中序：BDCEAFHG 求后序：DECBHGFA   实例二  先序：ABDGHCEFI 中序：GDHBAECIF 求后序:GHDBEIFCA        应用： #   树是数据库中数据组织的一种重要形式 操作系统子父进程的关系本身就是一棵树 面对对象语言中累的继承关系本身就是一棵树  "},{"id":1,"href":"/docs/example/table-of-contents/with-toc/","title":"www","section":"算法练习","content":"Table Of Content/with-toc.md #  "},{"id":2,"href":"/docs/shortcodes/section/first-page/","title":"排序（一）","section":"Chapter 9：排序","content":"排序一 #  前提 #   函数头统一的规范格式void X_sort(ElementType A[],int N);  大多数情况下，为简单起见，讨论从小到大的整数排序 N是正整数 只讨论基于比较的排序（\u0026gt;=\u0026lt;有定义） 只讨论内部排序 稳定性：任意两个相等的数据，排序前后的相对位置不发生改变 没有一种排序是任何情况下都表现最好的    简单排序（冒泡，插入） #  冒泡排序 #   void Bubble_sort(ElementType A[],int N) { for(P=N-1;P\u0026gt;0;P++) { flag=0;//做标记，如果未执行swap则退出循环 for(i=0;i\u0026lt;P;i++) { if(A[i]\u0026gt;A[i+1]) { Swap(A[i],A[i+1]); flag=1;//标记发生了变化 } } if(flag==0)//全程无交换 { break; } } }   复杂度  最好情况：顺序T=O（N）； 最坏情况：逆序T=O（N^2）;    插入排序 #   void Insertion_Sort(ElementType A[],int N) { for(P=1;P\u0026lt;N;P++) { Tmp=A[P];//摸下一张牌 for(i=P;i\u0026gt;0\u0026amp;\u0026amp;A[i-1]\u0026gt;Tmp;i--) { A[i]=A[i-1];//移出空位 A[i]=Tmp;//新牌落位 } } }   复杂度  最好情况：顺序T=O(N) 最坏情况：逆序T=O(N^2)    时间复杂度下界 #    对于下标i\u0026lt;j,如果A[i]\u0026gt;A[j],则称（i,j）是一对逆序对(inversion)\n  问题：序列{34,8,64,51,32,21}中有多少逆序对？9对\n  交换2个相邻元素正好消去1个逆序对！\n  插入排序：T(N,I)=O(N+I)\n  定理：任意N个不同元素组成的序列平均具有N（N-1）/4个逆序对\n  定理：任何仅以交换相邻量元素来排序的算法，其平均时间复杂度为N^2\n  这意味着：要提高算法效率，我们必须\n 每次消去不止1个逆序对！ 每次交换相隔较远的2个元素！    希尔排序 #    定义增量序列Dm\u0026gt;Dm-1\u0026gt;\u0026hellip;\u0026gt;D1=1\n  对每个Dk进行“Dk-间隔”排序（k=M，M-1，。。。1）\n  原始希尔排序Dm=|N/2|,Dk=|Dk+1/2|('||\u0026lsquo;表示如上)\n void Shell_sort(ElementType A[],int N) { for(D=N/2;D\u0026gt;0;D/=2) { for(P=D;P\u0026lt;N;P++) { Tmp=A[P]; for(i=P;i\u0026gt;=D\u0026amp;\u0026amp;A[i-D]\u0026gt;Tmp;i-=D) { A[i]=A[i-D]; } A[i]=Tmp; } } }    最坏情况：T=O（N^2）\n  更多增量序列 #   Hibbard增量序列  Dk=2^k-1——相邻元素互质 最坏情况：T=O(N^3/2) 猜想：Tavg=O(N^5/4)(至今无人能够证明)   Sedgewick增量序列  {1,5,19,4111091\u0026hellip;}——94^i-92^i+1或4^i-3*2^i+1 猜想：Tavg=O(N^7/6),Tworst=O(N^4/3)    堆排序 #  选择排序 #   void Selection_Sort(ElementType A[],int N) { for(i=0;i\u0026lt;N;i++) { MinPosition=ScanForMin(A,i,N-1);//从A[i]到A[N-1]中找到最小元，并将其位置赋给MinPosition Swap(A[i],A[Minposition]);//将未排序部分最小元换到有序部分的最后位置 } }    无论如何:T=O(N^2)\n  如何快速找到最小元\n  堆排序 #    算法一\n void Heap_Sort(ElementType A[],int N) { BuildHeap(A);//O(N) for(i=0;i\u0026lt;N;i++) { TmpA[i]=DeleteMin(A);//O(logN) } for(i=0;i\u0026lt;N;i++)//O(N) { A[i]=TmpA[i]; } }    T(N)=O(N logN)\n  算法二\n void Heap_sort(ElementType A[],int N) { for(i=N/2;i\u0026gt;=0;i--) { PercDown(A,i,N); } for(i=N-1;i\u0026gt;0;i--) { Swap(\u0026amp;A[0],\u0026amp;A[i]);//DeleteMax PercDown(A,0,i); } }    定理：堆排序处理N个不同元素的随机排列的平均比较次数是2N logN-O(Nlog LogN)\n  虽然堆排序给出最佳平均时间复杂度，但实际效果不如用Sedgewick增量序列的希尔排序\n  归并排序 #    核心：有序子列的归并\n  如果两个子列一共有N个元素，则归并的时间复杂度是多少？N\n //L=左边起始位置，R=右边起始位置，RightEnd=右边终点位置 void Merge(ElementType A[],ElementType TmpA[],int L,int R,int RightEnd) { LeftEnd=R-1;//左边终点位置，假设左右两列挨着 Tmp=L;//存放结果的数组的初始位置 NumElements=RightEnd-L+1; while(L\u0026lt;=LeftEnd\u0026amp;\u0026amp;R\u0026lt;=RightEnd) { if(A[L]\u0026lt;=A[R]) { TmpA[Tmp++]=A[L++]; } else { TmpA[Tmp++]=A[R++]; } } while(L\u0026lt;=LeftEnd)//直接复制左边剩下的 { TmpA[Tmp++]=A[L++]; } while(R\u0026lt;RightEnd)//直接复制右边剩下的 { TmpA[Tmp++]=A[R++]; } for(i=0;i\u0026lt;NumElements;i++,RightEnd--) { A[RightEnd]=Tmp[RightEnd]; } }    递归算法 #    分而治之\n void Msort(ElementType A[],ElementType TmpA[],int L,int RightEnd) { int Center; if(L\u0026lt;RightEnd) { Center=(L+RightEnd)/2; Msort(A,TmpA,L,Center); Msort(A,TmpA,Center+1,RightEnd); Merge(A,TMPA,L,Center+1,RightEnd); } }    T(N)=T(N/2)+T(N/2)+O(N)-\u0026gt;T(N)=O(NlogN)\n  此函数借口与上边说的不一致，对用户很不友好\n  统一函数接口的函数\n void Merge_sort(ElementType A[],int N) { ElementType *TmpA; TmpA=malloc(N*sizeof(ElementType)); if(TmpA!=NULL) { Msort(A,TmpA,0,N-1); free(TmpA); } else { error(\u0026quot;空间不足\u0026quot;); } }    如果只在Merge中声明临时数组\n void Merge(ElementType A[],int L,int R,int RightEnd) void Msort(ElementType A[],int L,int RightEnd)    内存会被重复地申请并释放\n  非递归算法 #    额外的空间复杂度为O(N)\n void Merge_sort(ElementType A[],int N) { int length=1;//初始化子序列长度 ElementType *TmpA; TmpA=malloc(N*sizeof(ElementType)); if(TmpA!=NULL) { while(length\u0026lt;N) { Merge_pass(A,TmpA,N,length); length*=2; Merge_pass(TmpA,A,N,length); length*=2; } free(TmpA); } else { error(\u0026quot;空间不足\u0026quot;); } }    最大缺点：需要额外的空间\n  在外排序时非常有用\n  "},{"id":3,"href":"/docs/example/","title":"首页","section":"Docs","content":"LeetCode #  Github #  "},{"id":4,"href":"/docs/shortcodes/columns/","title":"Chapter 2： 栈","section":"Shortcodes","content":"栈 ADT、队列 ADT #  栈模型 #   栈(stack)是限制插入和删除只能在一个位置上进行的表。该位置是表的末端，叫做栈的顶(Top)。对栈的基本操作有Push（入栈）和Pop（出栈），前者相当于插入，后者是删除最后一个插入的元素。 栈有时被叫做LIFO（先进后出）表，普通的清空栈操作和判断是否为空栈的操作都是栈操作指令的一部分，但是对栈所能做的也基本上就是Push和Pop操作。  栈的实现 #   由于栈是一个表，因此任何实现表的方法都能实现栈。两种较为流行的方法：一种使用指针，另一种使用数组。  栈的链表实现 #    栈的第一种实现方法是单链表。我们通过在表顶端插入实现Push，通过删除表顶端元素实现Pop。Pop操作只是考察表顶端元素并返回它的值。又是Pop操作和Top操作合二为一。\n struct Node { ElementType Element; PtrToNode Next; }; struct Node* Creatstack(void) { struct Node S;//创建一个空栈 S=malloc(sizeof(struct Node)); if(S=NULL) { FatalError(\u0026quot;out of space!!!\u0026quot;); } S-\u0026gt;Next=NULL; return S; }    Push是作为想来年表前端进行插入而实现的，其中，表的前端作为栈顶。Top的实施是通过考察表在第一个位置上的元素而完成的。最后，Pop是通过删除摆动二前端的元素而实现的。\n //Push进栈 void Push(ElementType X,Stack S) { PtrToNode TmpCell; TmpCell=malloc(sizeof(struct Node)); if(TmpCell=NULL) { FatalError(out of space!!!\u0026quot;); } else { TmpCell-\u0026gt;Element=X; TmpCell-\u0026gt;Next=S-Next; S-\u0026gt;Next=TmpCell; } } //从栈弹出元素 void Pop(Stack S) { PtrToNode FirstCell; if(IsEmpty(S)) { Error(\u0026quot;Empty stack!!\u0026quot;); } else { FirstCell=S-\u0026gt;Next; S-\u0026gt;Next=S-\u0026gt;Next-\u0026gt;Next; free(FirstCell); } }    队列模型 #   队列的基本操作是入队(Enqueue),它是在表的末端（叫做队尾（rear））插入一个元素。还有出队（Dequeue）操作，他是删除（或返回）在表的开头（叫做队头（front））的元素。  队列的数组实现 #    如同栈的情形一样，对于队列而言，任何表实现都是合法的，像栈一样，人对于每一种操作，链表实现和数组实现都给出快速的O（1）运行时间，队列的链表实现是直接的\n struct QueueRecord { int Capacity; int Front; int Rear; int Size; ElementType *Array; }; //构造空队列 void MakeEmpty(Queue Q) { Q-\u0026gt;Size=0; Q-\u0026gt;Front=1; Q-\u0026gt;Rear=0; } //入队 static int Succ(int Value,Queue Q) { if(++Value==Q-\u0026gt;Capacity) { value=0 } return Value; } void Emqueue(EleementType X,Queue Q) { if(IsFull(Q)) { Error(\u0026quot;Full Queue!!!!\u0026quot;); } else { Q-\u0026gt;Size++; Q-\u0026gt;Rear=Succ(Q-\u0026gt;Rear,Q); Q-\u0026gt;Array[Q-\u0026gt;Rear]=x; } }   "},{"id":5,"href":"/docs/example/table-of-contents/without-toc/","title":"com","section":"算法练习","content":"Table OF Content/without-Toc.md #  "},{"id":6,"href":"/docs/shortcodes/section/second-page/","title":"排序（二）","section":"Chapter 9：排序","content":"# 排序二 #  快速排序 #  算法描述 #    分而治之\n void Quicksort(ElementType A[],int N) { pivot=从A[]中选取一个主元； 将S={A[]/pivot}将A[]分成2个独立子集，其中一个全都大于pivot，另一个全都小于pivot A1={a属于S|a\u0026lt;=pivot}和A2={a属于S|a\u0026gt;=pivot}; A[]=Quicksort(A1,N1)且{pivot}且Quicksort(A2,N2); }    什么是快速排序算法的最好情况？\n 每次正好中分-\u0026gt;T(N)=O(NlogN)    选主元 #    令pivot=A[0]?\n 非常不好的方法：如果数组一开始就顺序，则时间复杂度为T(N)=O(N)+T(N-1)-\u0026gt;T(N)=O(N^2)    随机选取pivot？\n 也不好，因为随机选取需要函数rand(),函数rand()也需要时间    一般情况下：选取头、中、尾的中位数\n  pivot的不同的取法对运行速度有多大影响\n ElementType Median3(ElementType A[],int Left,int Right) { int Center=(Left+Right)/2; if(A[Left]\u0026gt;A[Center]) { Swap(\u0026amp;A[Left],\u0026amp;A[Center]) } if(A[Left]\u0026gt;A[Right]) { Swap(\u0026amp;A[Left],\u0026amp;A[Right]) } if(A[Center]\u0026gt;A[Right]) { Swap(\u0026amp;A[Center],\u0026amp;A[Right]) }//A[Left]\u0026lt;=A[Center]\u0026lt;=A[Right] Swap(\u0026amp;A[Center],\u0026amp;A[Right-1]);//将pivot藏到右边 return A[Right-1];//返回pivot }    子集划分 #   如果有元素正好等于pivot，则停下来交换  小规模数据的处理 #   快速排序的问题  用递归 对小规模的数据（例如N不到100）可能还不如插入排序快   解决方案  当递归的数据规模充分小，则停止递归，直接调用简单排序（例如插入排序） 在程序中定义一个Cutoff阀值    算法实现 #   void Quicksort(ElementType A[],int Left,int Right) { if(Cutoff\u0026lt;=Right-Left) { pivot=Median3(A,Left,Right); int i=Left; int j=Right; for( ; ; ) { while(A[++i]\u0026lt;pivot) { } while(A[--j]\u0026gt;pivot) { } if(i\u0026lt;j) { Swap(\u0026amp;A[i],\u0026amp;j[j]) } else { break; } } Swap(\u0026amp;A[i],\u0026amp;A[Right-1]); Quicksort(A,Left,i-1); Quicksort(A,i+1,Right); } else { Insertion_Sort(A+Left,Right-Left+1); } } void Quick_sort(ElementType A[],int N) { Quiicksort(A,0,N-1); }  表排序 #  算法描述 #   间接排序  定义一个指针数组为“表”（table）  比较A[0(table的值)]和A[1]的(key)大小,交换table(指针)，比较A[2]与A[0]的大小，只有小于前边的数的时候才呼唤位置，否则不换。 结果只交换了指针以及指针所指的那个东西，并没有交换实物（物理意义上的） 如果仅要求按顺序输出，则输出：A[table[0]],A[table[1]],\u0026hellip;，A[table[N-1]];    物理排序 #    N个数字的排列有若干个独立的环组成   table[0]=3-\u0026gt;table[3]=1-\u0026gt;table[1]=5-\u0026gt;table[5]=0这是一个环\n  table[2]=2这是一个环\n  table[4]=7-\u0026gt;table[7]=6-\u0026gt;table[6]=4这是一个环\n 将table[0]放在Temp=f中,table[0]处的值为3，则table[0]中放的为table[3]中的a，此时table[3]空了出来，table[3]值为1，则table[1]中的d放到table[3]处。 如何判断一个换的结束？if(table[i]==i)    复杂度分析\n 最好情况：初始即有序 最坏情况：  每个环包含2个元素，有[N/2]个环 需要[3N/2]次元素移动      T=O（m N），m是每个A元素的复制时间\n  桶排序 #   假设有N个学生，他们的成绩是0到100之间的整数（于是有101个不同的成绩值）。如何在线性时间内将学生按成绩排序？   为每个成绩值建造一个桶，count中存放指向空链表的指针，则有101个空链表（101个空的桶）\n  将第i个学生的成绩（例如88）将此学生的信息插入第88个链表（桶）的表头里\nvoid Bucket_sort(ElementType A[],int N) { count[]初始化； while(读入一个学生的成绩grade) { 将该学生插入count[grade]链表； } for(i=0;i\u0026lt;M;i++) { if(count[i]) { 输出整个count[i]链表； } } }       时间复杂度为T(N,M)=O(M+N)(M为桶的数量) 但是M\u0026raquo;N时呢？  基数排序 #   假设有N=10个整数，每个整数的值在0到999之间（有1000个不同的M的值），此时不能在线性时间内排序 输入序列：64,8，216,512,27,729,0,1,343,125 用“次位优先”(Least Significant Digit)(pass 1:比较个位数，pass 2:比较十位，pass 3：比较百位)  T=O(P(N+B)),B为整数进制，P为LSD趟数，元素个数为N 复杂度糟糕与否取决于基数有多大，如果B的个数相对小的话，算法接近线性复杂度  基数排序还可被用来处理多关键字的排序 #   一副扑克牌是按2中关键字排序的  主关键字为花色，次关键字为面值，在某种花色内部按照面值排序 也可以将次关键字理解为低位（个位），主关键字理解为高位   用“主位优先”(Most Significant Digit):  为花色建四个桶 每个桶内分别排序，最后合并结果   用“次位优先的排序”（Leasr Significant Digit）:  为面值建13个桶 将结果合并，然后为花色建4个桶 将牌放入桶中    "},{"id":7,"href":"/docs/shortcodes/details/","title":"Chapter 3： 递归","section":"Shortcodes","content":"/home/wfsias/DSW/content/docs/shortcodes/details.md #  "},{"id":8,"href":"/docs/shortcodes/expand/","title":"Chapter 4： 图","section":"Shortcodes","content":"什么是图 #   表示多对多的关系 包含  一组定点：通常用V（vertex）表示顶点集合 一组边：通常用E（Edge）表示边的集合  边是顶点对：（v，m）属于E，其中v，w属于V 有向边\u0026lt;v,w\u0026gt;表示从v指向w的边（单行线） 不考虑重边和自回路      抽象数据类型 #    类型名称：图（Graph）\n  数据对象集:G(V,E)由一个飞空的优先顶点集合V和一个有限边集合E组成。\n  操作集：对于任意图G属于Graph,以及v属于V,e属于E\n Graph Creat();//建立并返回空图 Graph InsertVertex(Graph G,Vertex e);//将v插入G Graph InsertEdge(Graph G,Edge e);//将e插入G void DFS(Graph G,vertex v);//从顶点v出发深度优先遍历图G void BFS(Graph G,vertex v);//从顶点v出发宽度优先遍历图G void shortestPath(Graph G,vertex,int Dist[]);//计算图G中顶点v到任意其他顶点的最短距离 void MST(Graph G);//计算图的最小生成树    怎么在程序中表示表示一个图 #    邻接矩阵（二维数组）G[N][N]——N个顶点从0到N-1编号,节点间有边就为1，无边为0\n  用一个长度为N(N+1)/2的一维数组A存储矩阵的下三角（按行来存）：比邻接矩阵节省一般空间\n  邻接矩阵有什么好处：\n 直观、简单、好理解 方便检查任意一对顶点间是否存在边 方便找任意顶点的所有“邻接点”（右边直接相连的顶点） 方便计算任一顶点的“度”（从该点出发的边数为“出度”，指向该点的边数为入度）  无向图：对应行（或列）非0元素的个数 有向图：对应行非零元素的个数为“出度”；对应列非零元素的个数为”入度“      邻接矩阵有什么不好\n 浪费空间——存稀疏图（点很多而边很少）有大量无效元素  对稠密图（特别是完全图）还是很合算的   浪费时间——统计稀疏图中一共有多少边    邻接表（一定够稀疏才合算）：G[N]为指针数组，对应矩阵每行一个链表，只存非0元素。对于网络，结构中要增加权重的域\n 方便找任一顶点的所有“邻接点” 节约稀疏图的空间  需要N个头指针+2E个节点（每个节点至少2个域）   方便计算任一顶点的度？  对无向图：是的 对有向图：只能计算“出度”；需要构造“逆邻接表”（存指向自己的边）来方便计算“入度”。   方便检查任意一对顶点是否存在边？（很麻烦）    图的遍历 #    深度优先搜索\n //类似于树的先序遍历 void DFS(Vertex V) { Visited[V]=true; for(v的每个邻接点W) { if(!Visited[W]) { DFS(W); } } }    若有N个顶点、E条边，时间复杂度是\n 用邻接表存储图，有O(N+E) 用邻接矩阵存储图，有O(N^2)    广度优先搜索（Breadth First Search,BFS）\n void BFS(Vertex V) { visited[V]=true; Enqueue(V,Q); while(!TsEmpty(Q)) { V=Dequeue(Q); for(V的每个邻接点W) { if(!visited[W]) { visited[W]=true; Enqueue(W,Q); } } } }    若有N个顶点、E条边，时间复杂度是\n 用邻接表存储图，有O(N+E) 用邻接矩阵存储图，有O(N^2)    最短路径问题 #   在网络中，求两个不同顶点之间的所有路径中，边的权值之和最小的那一条路径  这条路径就是两点之间的最短路径(Shortest Path) 第一个顶点为源点(Source) 最后一个顶点为终点(Destination)   单元最短路径问题：从某固定源点出发，求其到素有其他顶点的最短路径  （有向）无权图 （有向）有权图   多源最短路径问题：求任意两顶点间的最短路径  无权图的单源最短路算法 #   按照递增（非递减）的顺序找出到各个顶点的最短路  0：-\u0026gt;v3 1:-\u0026gt;v1 and v6 2:-\u0026gt;v2 and v4 3:-\u0026gt;v3 and v7    多源最短路算法 #  Floyd算法 #   Dk[i][j]=路径{i-\u0026gt;{l\u0026lt;=k}-\u0026gt;j}的最小长度 D0,D1,\u0026hellip;,D(|v|-1)[i][j]即给出了i到j的真正最短距离 最初的D-1是什么？ 当D(k-1)已经完成，递推到Dk时：   或者k不属于最短路径{i-\u0026gt;{l\u0026lt;=k}-\u0026gt;j},则Dk=D(k-1)\n  或者k属于最短路径{i-\u0026gt;{l\u0026lt;=k}-\u0026gt;j},则该路径必定由两段最短路径组成：Dk[i][j]=D(k-1)[i][k]+D(k-1)[k][j];\nvoid Floyd() { for(i=0;i\u0026lt;N;i++) { for(j=0;j\u0026lt;N;j++) { D[i][j]=G[i][j]; path[i][j]=-1; } } for(k=0;k\u0026lt;N;k++) { for(i=0;i\u0026lt;N;i++) { for(j=0;j\u0026lt;N;j++) { if(D[i][j]+D[k][j]\u0026lt;D[i][j]) { D[i][j]=D[i][k]+D[k][j]; path[i][j]=k; } } } } }      最小生成树问题(Minimum Spanning Tree) #  什么是最小生成树 #   是一棵树  无回路 |v|个顶点有|v-1|条边   是生成树  包含全部顶点 |v|-1条边都在图里   边的权重和最小 最小生成树存在\u0026lt;-\u0026gt;图连通  贪心算法 #   什么是贪：每一步都要最好的 什么是好：权重最小的边 需要约束：  只能用图里有的边 只能正好用掉|v|-1条边 不能有回路    prime算法——让一颗小数长大 #    与Dijkstra算法相似\n void Dijkstra(Vertex s) { while(1) { V=未收录顶点中dist的最小者; if(这样的V不存在) { break; } collect[V]=true; for(V的每个临界点W) { if(collect[W]==false) { if(dist[V]+E\u0026lt;v,w\u0026gt;\u0026lt;dist[W]) { dist[W]=dist[V]+E\u0026lt;v,w\u0026gt;; path[W]=v; } } } } }    prime算法(稠密图)：从节点入手，搜索与节点相连的边，收录权重最小的边，之后从这条边到达下一个节点，递归执行此过程\n void Prime() { MST={s}; while(1) { V=未收录顶点中dist的最小者; if(这样的v不存在) { break; } 将V收录进MST; for(v的每个临界点W) { if(W未被收录) { if(E\u0026lt;v.w\u0026gt;\u0026lt;dist[W]) { dist[W]=E\u0026lt;v,W\u0026gt;; patent[W]=V; } } } } if(MST中收录的顶点不到|V|个) { Error(\u0026quot;生成树不存在！\u0026quot;); } }//dist[V]应被初始化为E\u0026lt;v,w\u0026gt;或正无穷    Kruskal算法——将森林合并成树:直接遍历整个图，从边入手，按权重有小到大的顺序将边收录，注意：不能构成回路，从最小权重的边开始收录\n void Kruskal(Graph G) { MST={ }; while(MST中不到|v|-1条边\u0026amp;\u0026amp;E中还有边) { 从E中取出权重最小的边E\u0026lt;v,w\u0026gt;；//最小堆 将E\u0026lt;v,w\u0026gt;从E中删除； if(E\u0026lt;v,w\u0026gt;不在MST中构成回路)//并查集 { 将E\u0026lt;v,w\u0026gt;加入MST; } else { 彻底无视E\u0026lt;v,w\u0026gt;;//即将它彻底删除 } } if(MST中不到|V|-1条边) { Error(\u0026quot;生成树不存在！\u0026quot;); } }//T=O(|E|log|E|)    拓扑排序 #    【例】计算机专业排课   转化为图(AOV网络(Activity On Vertex))(每个节点表示一个事件)   拓扑序：如果图中从V到W有一条有向路径，则V一定排在W之前。满足此条件的顶点序列称为一个拓扑序\n  获得一个拓扑序的过程就是拓扑排序\n  AOV如果有合理的拓扑序，则必定是有向五环图(Directed Acyclic Graph,DAG)\n void Topsort() { for(cnt=0;cnt\u0026lt;|V|;cnt++) { V=未输出的入度为0的顶点;//O(|V|) if(这样的v不存在) { Error(\u0026quot;图中有回路!\u0026quot;); break; } 输出v，或者记录v的输出序号; for(V的每个邻接点W) { Indegree[W]--; } } }//T=O(|V|^2)    更节约聪明的算法：随时将入度为0的顶点放到一个容器里（容器可以随意定义）\n void Topsort() { for(途中每个顶点V) { if(Indegree[V]==0) { Enqueue(V,Q); } } while(!IsEmpty(Q)) { V=Dequeue(Q); 输出V,或者记录v的输出序号; cnt++; for(V的每个邻接点W) { if(--Indegree[W]==0) { Enqueue(W,Q); } } } if(cnt!=|V|) { Error(\u0026quot;图中有回路\u0026quot;); } }//T=O(|V|+|E|) //此算法还可被用来检测有向图是否为DAG    关键路径问题 #    AOE(Activity On Edge)网络（每条边表示一个过程或一道工序）   只有当指向某个节点的路径所连接的节点表示的事件全部完工，这个节点才能执行并完工\n  整个工期有多长\n Earliest[0]=0;Earliest[1]=Earliest[0]+C\u0026lt;0,1\u0026gt;+6; Earliest[j]=max(\u0026lt;i,j\u0026gt;属于E){Earlisest[i]+C\u0026lt;i,j\u0026gt;（边ij的权重）};    哪组有机动时间\n //利用反推的方法，从结束那个工程开始往前推 Latest[8]=18;latest[7]=Latest[8]-C\u0026lt;8,7\u0026gt;=14; Latest[i]=min(\u0026lt;j,i\u0026gt;属于E){Latest[j]-C\u0026lt;j,i\u0026gt;(边ji的权重)} D\u0026lt;i,j\u0026gt;=Latest[j]-Earliest[i]-C\u0026lt;i,j\u0026gt;//机动时间    关键路径含义：由绝对不允许延误的活动组成的路径 #  "},{"id":9,"href":"/docs/shortcodes/hints/","title":"Chapter 5：哈弗曼树与哈弗曼编码","section":"Shortcodes","content":"哈弗曼树与哈弗曼编码 #  什么是哈弗曼树 #    例：将百分制的考试成绩转换成五分制的成绩\n if(score\u0026lt;60) { grade=1; } else if(score\u0026lt;70) { grade=2; } else if(score\u0026lt;80) { grade=3; } else if(score\u0026lt;90) { grade=4; } else { grade=5; }   判定树  查找效率为3.15（次数乘以频率）        例：将百分制的考试成绩转换称五分制的成绩\n if(score\u0026lt;80) { if(score\u0026lt;70) { if(grade\u0026lt;60) { grade=1; } else { grade=2; } } else if(score\u0026lt;90) { grade=4; } } else { grade=5; }   判定树  查找效率为2.2       如何根据节点不同的查找频率构造更有效的搜索树——这是哈弗曼树要解决的问题  哈弗曼树的定义 #   带权路径长度（WPL）：设二叉树有n个叶子节点，每个叶子节点带有权值Wk，从根结点到每个叶子结点的长度为Lk，则每个叶子结点的带权路径长度之和就是：W1×L1+\u0026hellip;+Wn×Ln 最优二叉树或哈弗曼树：WPL最小的二叉树 例：有五个叶子结点他们的权值为{1,2,3,4，5}，用此权值序列可以构造出形状不同的多个二叉树。  WPL=5×1+4×2+3×3+2×4+1×4=34    WPL=50  WPL=33   哈弗曼树的构造 #    每次把权值最小的两棵二叉树合并  typedef struct TreeNode* HuffmanTree; struct TreeNode { int weight; HuffmanTree Left,Right; }; HuffmanTree Huffman(MinHeap H) { //假设H-\u0026gt;Size个权值已经存在H-\u0026gt;Elements[]-\u0026gt;weight里 int i; HuffmanTree T; BuildMinHead(H);//将H-\u0026gt;Element[]按权值调整为最小堆 for(i=1;i\u0026lt;H-\u0026gt;size;i++)//做H-\u0026gt;Size-1次合并 { T=malloc(sizeof(struct TreeNode));//建立新结点 T-\u0026gt;Left=DeleteMin(H);//从最小堆中删除一个结点，作为新T的左子结点 T-\u0026gt;Right=DeleteMin(H);//从最小堆中删除一个结点，作为新T的右子结点 T-\u0026gt;weight=T-\u0026gt;Left-\u0026gt;weight+T-\u0026gt;Right-\u0026gt;weight;//计算新权值 Insert(H,T);//将新T插入最小堆 } return T; } //整体复杂度为O(N logN)    哈弗曼树的特点 #   没有度为1的节点 n个也字节带你的哈弗曼树共有2n-1个结点 哈弗曼树的任意非叶结点的左右子树交换后仍是哈弗曼树； 对同一组权值{W1\u0026hellip;Wn}，是否存在不同构的两棵哈弗曼树呢？  对同一组权值{1,2,3,4}，不同构的两棵哈弗曼树：    WPL=18  哈弗曼编码 #    给定一段字符串，如何对字符进行编码，可以使该字符串的编码存储空间最少？\n 【例】假设有一段文本，包含58个字符，并由以下7个字符构成：a，e，i，s，t，空格（sp），换行（nl）；这七个字符出现的次数不同，如何对这7个字符进行编码，使得总编码空间最少？  【分析】  用等长ASCII编码：58×8=464位； 用等长三位编码：58×3=174位； 不等长编码：出现频率高的字符用的编码短些，出现频率低的字符则可以编码长些？        如何进行不等长编码？\n 如何避免二义性？  前缀码prefix code：任何字符的编码都不是另一字符编码的前缀  可以无二义的解码        二叉树用于编码\n 用二叉树进行编码：  左右分支：1\\0 字符只在叶节点上      四个字符的频率：a4,u1,x2,z1;   Cost(aaaxuaxz-\u0026gt;0000001001001011)=2×4+2×1+2×2+2×1=16   Cost(aaaxuaxz-\u0026gt;00010110010111)=1×4+3×1+2×2+3×1=14\n  "},{"id":10,"href":"/docs/shortcodes/katex/","title":"Chapter 6：链表实现","section":"Shortcodes","content":"链表实现 #   /*链表的优缺点 链表（离散存储）定义：1、n个节点离散分配2、彼此通过指针向相连3、每个节点只 有一个前驱节点，只有一个后继节点，首节点没有前驱节点，尾节点没有后继节点。 专业术语：首节点（第一个存放有效数据的节点）、尾节点（最后一个有效节点）、头结点 （没有存放有效数据）：第一个有效节点之前那个节点，加头结点的目的主要是为了方便对 链表的操作。 头指针（指向头结点的指针变量，存放头结点的地址）、尾指针（只想尾节点的指针变量， 存放尾节点的地址） 确定一个链表需要几个参数：只需要一个参数：头指针因为我们通过头指针可以推算出链表 的其他所有信息 链表的分类：单链表、双链表（每一个节点有两个指针域）、循环链表（能通过任何一个节 点找到其他所有的节点）、非循环链表 算法：遍历、查找、清空、销毁、求长度、排序、删除节点、插入节点（用中间值r取代后一 个节点的地址）*/ #include\u0026lt;stdio.h\u0026gt; #include\u0026lt;stdlib.h\u0026gt; #include\u0026lt;malloc.h\u0026gt; typedef struct Node { int date;//数据域 int Node *pNext;//指针域 }；NODE;*PNODE;//NODE等价于struct Node,PNODE等价于struct Node* //函数声明 PNODE creat_list(void);//创建一个链表 void treaverse_list(PNODE pHead);//遍历 bool is_empty(PNODE pHead);//判空 int length_list(PNODE);//链表长度 bool insert_list(PNODE ,int pos,int val);//查找 bool delete_list(PNODE ,int pos,int *pval);//删除 void sort_list(PNODE);//排序 int main(void) { PNODE pHead=NULL;//等价于struct Node *pHead=NULL pHead=creat_list(); treaverse_list(pHead); int len=length_list(pHead); printf(\u0026quot;链表长度是%d\\n\u0026quot;,len); sort_list(pHead); insert_list(pHead,3,33); int val; if(delete_list(pHead,4,\u0026amp;val)) { printf(\u0026quot;删除成功，您删除的元素是：%d\\n\u0026quot;,val); } else { printf(\u0026quot;删除失败！您删除的元素不存在\\n\u0026quot;); } treaverse_list(pHead); } PNODE creat_list(void) { int len;//用来存放有效节点的数目 int i; int val;//用来临时存放用户输入的节点的值 //分配了一个不存放有效数字的头结点 PNODE pHead=(PNODE)malloc(sizeof(NDOE)); if(NULL==pHead) { printf(\u0026quot;分配失败，程序终止\\n\u0026quot;); exit(-1); } PNODE pTail=pHead; pTail-\u0026gt;pNext=NULL; printf(\u0026quot;请输入您想要生成的节点个数：len=\u0026quot;)； scanf(\u0026quot;%d\u0026quot;,\u0026amp;len); for(i=0;i\u0026lt;len;++i) { printf(\u0026quot;请输入第%d个节点的值：\u0026quot;，i+1); scanf(\u0026quot;%d\u0026quot;,\u0026amp;val); PNDOE pNew=(PNODE)malloc(sizeof(NODE)); if(NULL==pNew) { printf(\u0026quot;分配失败！,程序终止！\u0026quot;); exit(-1); } pNew-\u0026gt;date=val; pTail-\u0026gt;pNext=pNew; pNew-\u0026gt;pNext=NULL; pTail=pNew; } return pHead; } void treaverse_list(PNDOE pHead) { PNODE p=pHead-\u0026gt;pNext;//p指向头结点 while(NULL!=p) { printf(\u0026quot;%d\u0026quot;,p-\u0026gt;date); p=p-\u0026gt;pNext; } printf(\u0026quot;\\n\u0026quot;); return; } bool is_empty(PNODE pHead) { if(NULL=pHead-\u0026gt;pNext) { return true; } else { return false; } } int length_list(PNODE pHead) { PNODE p=pHead-\u0026gt;pNext; int len=0; while(NULL!=0) { ++len; p=p-\u0026gt;pNext; } return len; } void sort_list(PNODE pHead) { int i,j,t; int len=length(pHead); for(i=0,p=pHead-\u0026gt;pNext;i\u0026lt;len-1;++i,p=p-\u0026gt;pNext) { for(j=i+1;q=p-\u0026gt;pNext;j\u0026lt;len;++j,q=q-\u0026gt;pNext) { if(p-\u0026gt;date\u0026gt;q-\u0026gt;date)//类似于数组中的a[i]\u0026gt;a[j] { t=p-\u0026gt;date;//类似于数组中的t=a[i] p-\u0026gt;date=q-\u0026gt;date;//类似于数组中的a[i]=a[j] q-\u0026gt;date=t;//类似于数组中的a[j]=t } //狭义上不能用下标，因为空间在数组中是连续的，但在链表中不是连续的 } } } /*算法：狭义的算法是与数据的存储方式密切相关，广义的算法与存储方式无关 泛型：利用某种技术达到的效果，就是：不同的存储方式，执行的操作是一样的*/ //在pHead所指向的链表的第pos个节点的前面插入一个新节点，该节点的值是val，并且pos的值从1开始 bool insert_list(PNODE pHead,int pos,int val) { int i=0; PNODE p=pHead; while(NULL!=p\u0026amp;\u0026amp;i\u0026lt;pos-1) { p=p-\u0026gt;pNext; ++i; } if(i\u0026gt;pos-1||NULL==p) { return false; } PNODE pNew=(PNODE)malloc(sizeof(NODE)); if(NULL==pNew) { printf(\u0026quot;动态内存分配失败！\\n\u0026quot;)； exit(-1); } pNew-\u0026gt;date=val; PNODE q=p-\u0026gt;pNext; p-\u0026gt;pNext=pNew; pNew-\u0026gt;pNext=q; return true; } bool delete(PNODE pHead,int pos,int *pval) { int i=0; PNDOE p=pHead; while(NULL!=p\u0026amp;\u0026amp;i\u0026lt;pos-1) { p=p-\u0026gt;pNext; ++i; } if(i\u0026gt;pos-1||NULL==p) { return false; } PNODE q=p-\u0026gt;pNext; *pval=q-\u0026gt;date; //删除p节点后面的节点 p-\u0026gt;pNext=p-\u0026gt;pNext-\u0026gt;pNext; free(q); q=NULL; return true; }  "},{"id":11,"href":"/docs/shortcodes/mermaid/","title":"Chapter 7：散列查找","section":"Shortcodes","content":"/home/wfsias/DSW/content/docs/shortcodes/mermaid.md #  "},{"id":12,"href":"/docs/shortcodes/tabs/","title":"Chapter 8：如何建立图","section":"Shortcodes","content":"如何建立图 #  用邻接矩阵表示图 #   if(G[i][j]==1) { 表示\u0026lt;vi,vj\u0026gt;是G中的边 } else if(G[i][j]==0) { 表示否则 } /*用代码表示为 typedef struct GNode *PtrToGNode; struct GNode { int Nv;//顶点数 int Ne;//边数 weightType G[MaxVertexNum][MaxVertexNum]; //DateType Date[MaxVertexNum];//存顶点数据 }； typedef PtrToGNode MGraph;//以邻接矩阵存储的图类型 */    MGraph初始化\n  初始化一个有VertexNum个顶点但没有边的图\n typedef int Vertex;//用顶点下标表示顶点 MGraph CreatGraph(int VertexNum) { Vertex V,M; MGraph Graph; Graph=(MGraph)malloc(sizeof(struct GNode)); Graph-\u0026gt;Nv=VertxNum; Grapg-\u0026gt;Ne=0; /*注意：这里默认编号从0开始，到(Graph-\u0026gt;Nv-1)*/ for(V=0;V\u0026lt;Graph-\u0026gt;Nv;V++) { for(W=0;W\u0026lt;Graph-\u0026gt;Nv;W++) { Graph-\u0026gt;G[V][W]=0;//或INFINITY } } }    向MGraph中插入边\n typedef struct ENode *PtrToENode; struct ENode { Vertex V1,V2;//有向边\u0026lt;v1,v2\u0026gt; WeightType Weight;//权重 }; typedef PtrToNode Edge; void InsertEdge(MGraph Graph,Edge E) { //插入边 Graph-\u0026gt;G[E-\u0026gt;V2][E-\u0026gt;V1]=E-\u0026gt;weight; //若是无向图，还要插入边\u0026lt;V1,V2\u0026gt; Graph-\u0026gt;G[E-\u0026gt;V2][E-\u0026gt;V1]=E-\u0026gt;Weight; }    完整地建立一个MGraph\n  输入格式Nv,Ne,V1,V2,Weight\n MGraph BuildGraph() { MGraph Graph; Edge E; Vertex V; int Nv,i; scanf(\u0026quot;%d\u0026quot;,\u0026amp;Nv); Graph=CreatGraph(Nv); scanf(\u0026quot;%d\u0026quot;,\u0026amp;Graph-\u0026gt;Ne); if(Graph-\u0026gt;Ne!=0) { E=(Edge)malloc(sizeof(struct ENode)); for(i=0;i\u0026lt;Graph-\u0026gt;Ne;i++) { scanf(\u0026quot;%d %d %d\u0026quot;,\u0026amp;E-\u0026gt;E1,\u0026amp;E-\u0026gt;E2,\u0026amp;E-\u0026gt;E3); } } //如果定点有数据的话，读入数据 for(V=0;V\u0026lt;Graph-\u0026gt;Nv,V++) { scanf(\u0026quot; %c\u0026quot;,\u0026amp;(Graph-\u0026gt;Date[V])); } return Graph; }    简单地建立一个图\n int G[MAXN][MAXN]，Nv,Ne; void BuildGraph() { int i,j,v1,v2,w; scanf(\u0026quot;%d\u0026quot;,\u0026amp;Nv); //CreatGraph for(i=0;i\u0026lt;Nv;i++) { for(j=0;j\u0026lt;Nv;j++) { G[i][j]=0;//或INFINITY } scanf(\u0026quot;%d\u0026quot;,\u0026amp;Ne); for(i=0;i\u0026lt;Ne;i++) { scanf(\u0026quot;%d %d %d\u0026quot;,\u0026amp;v1,%v2,\u0026amp;w); } //InsertEdge G[v1][v2]=w; G[v2][v1]=w; } }    用邻接表表示图 #    邻接表：G[N]为指针数组，对应矩阵每行一个链表，只存非元素\n typedef struct Vnode { PtrToAdjVNode FirstEdge; };AdjList[MaxVertexNum]; //AdjList是邻接表类型 typedef struct GNode *PtrToGNode; struct GNode { int Nv;//顶点数 int Ne;//边数 AdjList G;//邻接表 }; typedef PteToGNode LGraph; //以邻接表的方式存储的图类 typedef struct AdjVNode *PtrToAdjVNode; struct AdjVNode { Vertex Adjv;//邻接点下标 WeightType Weight;//边权重 PtrToAdjVNode Next; }    LGraph初始化 #    初始化一个有VertexNum个顶点但没有边的图\n typedef int Vertex;//用顶点下标表示顶点，为整型 LGraph CreatGraph(itn VertexNum) { Vertex V,W; LGraph Graph; Graph=(LGraph)malloc(sizeof(struct GNode)); Graph-\u0026gt;Nv=VertexNum; Graph-\u0026gt;Ne=0; Graph-\u0026gt;G[V].FirstEdge=NULL; return Graph; }    向LGraph中插入边 #   void InsertEdge(LGraph Graph.Edge E) { PtrToAdjVNode NewNode; //*********插入边\u0026lt;V1,V2\u0026gt; //为V2建立新的邻接点 NewNode=(PtrToAdjVNode)malloc(sizeof(struct AdjVNode)); NewNode-\u0026gt;AdjV=E-\u0026gt;V2; NewNode-\u0026gt;Weight=E-\u0026gt;Weight; //*********若是无向图，还要插入边\u0026lt;V1,V2\u0026gt; //为V1建立新的邻接点 NewNode=(PtrToVNode)malloc(sizeof(struct AdjVNode)); NewNode-\u0026gt;AdjV=E-\u0026gt;V1; NewNode-\u0026gt;Weight=E-\u0026gt;Weight; //将V1插入V2的表头 NewNode-\u0026gt;Next=Graph-\u0026gt;G[E-\u0026gt;V2].FirstEdge; Graph-\u0026gt;G[E-\u0026gt;V2].FirstEdge=NewNode; } "},{"id":13,"href":"/posts/creating-a-new-theme/","title":"Creating a New Theme","section":"Posts","content":"Introduction #  This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I\u0026rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won\u0026rsquo;t cover using CSS to style your theme.\nWe\u0026rsquo;ll start with creating a new site with a very basic template. Then we\u0026rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026ldquo;$\u0026rdquo; prompt. The output will follow. Lines that start with \u0026ldquo;#\u0026rdquo; are comments that I\u0026rsquo;ve added to explain a point. When I show updates to a file, the \u0026ldquo;:wq\u0026rdquo; on the last line means to save the file.\nHere\u0026rsquo;s an example:\n## this is a comment $ echo this is a command this is a command ## edit the file $ vi foo.md +++ date = \u0026quot;2014-09-28\u0026quot; title = \u0026quot;creating a new theme\u0026quot; +++ bah and humbug :wq ## show it $ cat foo.md +++ date = \u0026quot;2014-09-28\u0026quot; title = \u0026quot;creating a new theme\u0026quot; +++ bah and humbug $ Some Definitions #  There are a few concepts that you need to understand before creating a theme.\nSkins #  Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.\nThe Home Page #  The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\nSite Configuration File #  When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent #  Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\nFront Matter #  The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendered into HTML.\nMarkdown #  Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\nTemplate Files #  Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it\u0026rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nHugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Hugo’s choice of templates.\nSingle Template #  A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\nList Template #  A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\nPartial Template #  A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\nCreate a New Site #  Let\u0026rsquo;s use Hugo to create a new web site. I\u0026rsquo;m a Mac user, so I\u0026rsquo;ll create mine in my home directory, in the Sites folder. If you\u0026rsquo;re using Linux, you might have to create the folder first.\nThe \u0026ldquo;new site\u0026rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n$ hugo new site ~/Sites/zafta $ cd ~/Sites/zafta $ ls -l total 8 drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 . drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 .. drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ Take a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That\u0026rsquo;s a topic for a different tutorial, so please ignore them for now.\nGenerate the HTML For the New Site #  Running the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that\u0026rsquo;s everything that\u0026rsquo;s not content). Since we have an empty site, it won\u0026rsquo;t do much, but it will do it very quickly.\n$ hugo --verbose INFO: 2014/09/29 Using config file: config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ The \u0026ldquo;--verbose\u0026rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \u0026ldquo;INFO:\u0026rdquo; or \u0026ldquo;WARN:\u0026rdquo; is present because we used that flag. The lines that start with \u0026ldquo;WARN:\u0026rdquo; are warning messages. We\u0026rsquo;ll go over them later.\nWe can verify that the command worked by looking at the directory again.\n$ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ See that new public/ directory? Hugo placed all generated content there. When you\u0026rsquo;re ready to publish your web site, that\u0026rsquo;s the place to start. For now, though, let\u0026rsquo;s just confirm that we have what we\u0026rsquo;d expect from a site with no content.\n$ ls -l public total 16 -rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml -rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml $ Hugo created two XML files, which is standard, but there are no HTML files.\nTest the New Site #  Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \u0026ldquo;server\u0026rdquo; command. If it is successful, you will see output similar to the following:\n$ hugo server --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop Connect to the listed URL (it\u0026rsquo;s on the line that starts with \u0026ldquo;Web Server\u0026rdquo;). If everything is working correctly, you should get a page that shows the following:\nindex.xml sitemap.xml That\u0026rsquo;s a listing of your public/ directory. Hugo didn\u0026rsquo;t create a home page because our site has no content. When there\u0026rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet’s go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\nI like that the verbose flag causes Hugo to list the files that it\u0026rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we\u0026rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn\u0026rsquo;t find a template for the home page and it told you so.\nAt this point, you\u0026rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.\nCreate a New Theme #  Hugo doesn\u0026rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\nWe\u0026rsquo;re going to create a new theme called \u0026ldquo;zafta.\u0026rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, Zafta uses \u0026ldquo;post\u0026rdquo; over \u0026ldquo;blog\u0026rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\nCreate a Skeleton #  Use the hugo \u0026ldquo;new\u0026rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n$ hugo new theme zafta $ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes $ find themes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html -rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml $ The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They\u0026rsquo;re optional, but if you\u0026rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It\u0026rsquo;s also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/zafta/theme.toml author = \u0026quot;michael d henderson\u0026quot; description = \u0026quot;a minimal working template\u0026quot; license = \u0026quot;MIT\u0026quot; name = \u0026quot;zafta\u0026quot; source_repo = \u0026quot;\u0026quot; tags = [\u0026quot;tags\u0026quot;, \u0026quot;categories\u0026quot;] :wq ## also edit themes/zafta/LICENSE.md and change ## the bit that says \u0026quot;YOUR_NAME_HERE\u0026quot; Note that the the skeleton\u0026rsquo;s template files are empty. Don\u0026rsquo;t worry, we\u0026rsquo;ll be changing that shortly.\n$ find themes/zafta -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html $ Update the Configuration File to Use the Theme #  Now that we\u0026rsquo;ve got a theme to work with, it\u0026rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add \u0026ldquo;-t zafta\u0026rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don\u0026rsquo;t put it in the configuration file or specify it on the command line, you won\u0026rsquo;t use the template that you\u0026rsquo;re expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi config.toml theme = \u0026quot;zafta\u0026quot; baseurl = \u0026quot;\u0026quot; languageCode = \u0026quot;en-us\u0026quot; title = \u0026quot;zafta - totally refreshing\u0026quot; MetaDataFormat = \u0026quot;toml\u0026quot; :wq $ Generate the Site #  Now that we have an empty theme, let\u0026rsquo;s generate the site again.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme\u0026rsquo;s directory.\nLet\u0026rsquo;s check the public/ directory to see what Hugo\u0026rsquo;s created.\n$ ls -l public total 16 drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css -rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html -rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js -rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml $ Notice four things:\n Hugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn\u0026rsquo;t create any pages. That\u0026rsquo;s because it considers a \u0026ldquo;page\u0026rdquo; to be a file created directly from a content file. It doesn\u0026rsquo;t count things like the index.html files that it creates automatically.  The Home Page #  Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo\u0026rsquo;s warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] If it can\u0026rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n$ find . -name index.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html $ The Magic of Static #  Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo\u0026rsquo;s opinion is that you\u0026rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don\u0026rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo\u0026rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.\n$ find themes/zafta -type d | xargs ls -ld drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js $ The Theme Development Cycle #  When you\u0026rsquo;re working on a theme, you will make changes in the theme\u0026rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\n Purge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4.  I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Hugo site for information on using Git with Hugo.\nPurge the public/ Directory #  When generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you\u0026rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.\nHugo\u0026rsquo;s Watch Option #  Hugo\u0026rsquo;s \u0026ldquo;--watch\u0026rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\nLive Reload #  Hugo\u0026rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \u0026ldquo;Wow, that\u0026rsquo;s totally amazing.\u0026rdquo;\nDevelopment Commands #  Use the following commands as the basis for your workflow.\n## purge old files. hugo will recreate the public directory. ## $ rm -rf public ## ## run hugo in watch mode ## $ hugo server --watch --verbose Here\u0026rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I\u0026rsquo;ve said this before, it\u0026rsquo;s amazing.\n$ rm -rf public $ hugo server --watch --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Watching for changes in /Users/quoha/Sites/zafta/content Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop INFO: 2014/09/29 File System Event: [\u0026quot;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\u0026quot;: MODIFY|ATTRIB] Change detected, rebuilding site WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 1 ms Update the Home Page Template #  The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme\u0026rsquo;s layout/ directory:\n index.html _default/list.html _default/single.html  We could update one of the default templates, but a good design decision is to update the most specific template available. That\u0026rsquo;s not a hard and fast rule (in fact, we\u0026rsquo;ll break it a few times in this tutorial), but it is a good generalization.\nMake a Static Home Page #  Right now, that page is empty because we don\u0026rsquo;t have any content and we don\u0026rsquo;t have any logic in the template. Let\u0026rsquo;s change that by adding some text to the template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and then verify the results.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/html\u0026gt; Live Reload #  Note: If you\u0026rsquo;re running the server with the --watch option, you\u0026rsquo;ll see different content in the file:\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt;document.write('\u0026lt;script src=\u0026quot;http://' + (location.host || 'localhost').split(':')[0] + ':1313/livereload.js?mindelay=10\u0026quot;\u0026gt;\u0026lt;/' + 'script\u0026gt;')\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; When you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\nBuild a \u0026ldquo;Dynamic\u0026rdquo; Home Page #  \u0026ldquo;Dynamic home page?\u0026rdquo; Hugo\u0026rsquo;s a static web site generator, so this seems an odd thing to say. I mean let\u0026rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We\u0026rsquo;ll use iteration in the template to do that.\nCreate New Posts #  Now that we have the home page generating static content, let\u0026rsquo;s add some content to the site. We\u0026rsquo;ll display these posts as a list on the home page and on their own page, too.\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n$ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md ERROR: 2014/09/29 Unable to Cast \u0026lt;nil\u0026gt; to map[string]interface{} $ That wasn\u0026rsquo;t very nice, was it?\nThe \u0026ldquo;new\u0026rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there\u0026rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n$ vi themes/zafta/archetypes/post.md +++ Description = \u0026quot;\u0026quot; Tags = [] Categories = [] +++ :wq $ find themes/zafta/archetypes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md $ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md /Users/quoha/Sites/zafta/content/post/first.md created $ hugo --verbose new post/second.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/second.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md /Users/quoha/Sites/zafta/content/post/second.md created $ ls -l content/post total 16 -rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md -rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md $ cat content/post/first.md +++ Categories = [] Description = \u0026quot;\u0026quot; Tags = [] date = \u0026quot;2014-09-29T21:54:53-05:00\u0026quot; title = \u0026quot;first\u0026quot; +++ my first post $ cat content/post/second.md +++ Categories = [] Description = \u0026quot;\u0026quot; Tags = [] date = \u0026quot;2014-09-29T21:57:09-05:00\u0026quot; title = \u0026quot;second\u0026quot; +++ my second post $ Build the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;, \u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ The output says that it created 2 pages. Those are our new posts:\n$ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html $ The new files are empty because because the templates used to generate the content are empty. The homepage doesn\u0026rsquo;t show the new content, either. We have to update the templates to add the posts.\nList and Single Templates #  In Hugo, we have three major kinds of templates. There\u0026rsquo;s the home page template that we updated previously. It is used only by the home page. We also have \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named \u0026ldquo;list.html\u0026rdquo; and single templates are named \u0026ldquo;single.html.\u0026rdquo;\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\nAdd Content to the Homepage #  The home page will contain a list of posts. Let\u0026rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \u0026ldquo;{{\u0026rdquo; and \u0026ldquo;}}\u0026rdquo;. In our template, the commands are:\n range .Title end  The \u0026ldquo;range\u0026rdquo; command is an iterator. We\u0026rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe \u0026ldquo;.Title\u0026rdquo; command prints the value of the \u0026ldquo;title\u0026rdquo; variable. Hugo pulls it from the front matter in the Markdown file.\nThe \u0026ldquo;end\u0026rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \u0026ldquo;end.\u0026rdquo; Everything between the \u0026ldquo;range\u0026rdquo; and \u0026ldquo;end\u0026rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt\u0026rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let\u0026rsquo;s take a moment to appreciate what we\u0026rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you\u0026rsquo;ve learned everything you need to know to build a theme. All that\u0026rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don\u0026rsquo;t worry, though, that\u0026rsquo;s all to come.\nAdd Content to the Posts #  We\u0026rsquo;re working with posts, which are in the content/post/ directory. That means that their section is \u0026ldquo;post\u0026rdquo; (and if we don\u0026rsquo;t do something weird, their type is also \u0026ldquo;post\u0026rdquo;).\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can\u0026rsquo;t find one, then it will look in the _default/ directory. There are some twists that we\u0026rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\nNow that we know the search rule, let\u0026rsquo;s see what we actually have available:\n$ find themes/zafta -name single.html | xargs ls -l -rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html We could create a new template, post/single.html, or change the default. Since we don\u0026rsquo;t know of any other content types, let\u0026rsquo;s start with updating the default.\nRemember, any content that we haven\u0026rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we\u0026rsquo;re going to be adding different types of content and we\u0026rsquo;re going to end up undoing some of the changes we\u0026rsquo;ve made. It\u0026rsquo;s good because we\u0026rsquo;ll be able to see immediate results. It\u0026rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we\u0026rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we\u0026rsquo;ll accept the cost and proceed.\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you\u0026rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That\u0026rsquo;s a refreshing amount of joy right there.\nUpdate the Template File #  $ vi themes/zafta/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html $ cat public/post/first/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;first\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my first post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ cat public/post/second/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;second\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my second post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Notice that the posts now have content. You can go to localhost:1313/post/first to verify.\nLinking to Content #  The posts are on the home page. Let\u0026rsquo;s add a link from there to the post. Since this is the home page, we\u0026rsquo;ll update its template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;/post/second/\u0026quot;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;/post/first/\u0026quot;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Create a Post Listing #  We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let\u0026rsquo;s make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let\u0026rsquo;s take a quick look and see which list templates are available.\n$ find themes/zafta -name list.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don\u0026rsquo;t have multiple content types, so let\u0026rsquo;s stay consistent and update the default list template.\nCreating Top Level Pages #  Let\u0026rsquo;s add an \u0026ldquo;about\u0026rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let\u0026rsquo;s verify that by creating an \u0026ldquo;about\u0026rdquo; page at the top level:\n$ vi content/about.md +++ title = \u0026quot;about\u0026quot; description = \u0026quot;about this site\u0026quot; date = \u0026quot;2014-09-27\u0026quot; slug = \u0026quot;about time\u0026quot; +++ ## about us i'm speechless :wq Generate the web site and verify the results.\n$ find public -name '*.html' | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html Notice that the page wasn\u0026rsquo;t created at the top level. It was created in a sub-directory named \u0026lsquo;about-time/\u0026rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It\u0026rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/theme/\u0026quot;\u0026gt;creating a new theme\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/about-time/\u0026quot;\u0026gt;about\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/second-post/\u0026quot;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/first-post/\u0026quot;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;script\u0026gt;document.write('\u0026lt;script src=\u0026quot;http://' + (location.host || 'localhost').split(':')[0] + ':1313/livereload.js?mindelay=10\u0026quot;\u0026gt;\u0026lt;/' + 'script\u0026gt;')\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Notice that the \u0026ldquo;about\u0026rdquo; link is listed with the posts? That\u0026rsquo;s not desirable, so let\u0026rsquo;s change that first.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026quot;post\u0026quot;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if eq .Type \u0026quot;page\u0026quot; }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n$ find public -name '*.html' | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let\u0026rsquo;s do it the hard way and change the permalink in the configuration file.\n$ vi config.toml [permalinks] page = \u0026quot;/:title/\u0026quot; about = \u0026quot;/:filename/\u0026quot; Generate the web site and verify that this didn\u0026rsquo;t work. Hugo lets \u0026ldquo;slug\u0026rdquo; or \u0026ldquo;URL\u0026rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\nSharing Templates #  If you\u0026rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn\u0026rsquo;t. That\u0026rsquo;s because we didn\u0026rsquo;t put the title in the home page\u0026rsquo;s template (layouts/index.html). That\u0026rsquo;s an easy thing to do, but let\u0026rsquo;s look at a different option.\nWe can put the common bits into a shared template that\u0026rsquo;s stored in the themes/zafta/layouts/partials/ directory.\nCreate the Header and Footer Partials #  In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme\u0026rsquo;s presentation.\n$ vi themes/zafta/layouts/partials/header.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; :wq $ vi themes/zafta/layouts/partials/footer.html \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Update the Home Page Template to Use the Partials #  The most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \u0026quot;theme/partials/header.html\u0026quot; . }} versus\n{{ partial \u0026quot;header.html\u0026quot; . }} Both pass in the context.\nLet\u0026rsquo;s change the home page template to use these new partials.\n$ vi themes/zafta/layouts/index.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026quot;post\u0026quot;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if or (eq .Type \u0026quot;page\u0026quot;) (eq .Type \u0026quot;about\u0026quot;) }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Generate the web site and verify the results. The title on the home page is now \u0026ldquo;your title here\u0026rdquo;, which comes from the \u0026ldquo;title\u0026rdquo; variable in the config.toml file.\nUpdate the Default Single Template to Use the Partials #  $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\nAdd “Date Published” to Posts #  It\u0026rsquo;s common to have posts display the date that they were written or published, so let\u0026rsquo;s add that. The front matter of our posts has a variable named \u0026ldquo;date.\u0026rdquo; It\u0026rsquo;s usually the date the content was created, but let\u0026rsquo;s pretend that\u0026rsquo;s the value we want to display.\nAdd “Date Published” to the Template #  We\u0026rsquo;ll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }} Posts use the default single template, so we\u0026rsquo;ll change that file.\n$ vi themes/zafta/layouts/_default/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Generate the web site and verify the results. The posts now have the date displayed in them. There\u0026rsquo;s a problem, though. The \u0026ldquo;about\u0026rdquo; page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \u0026ldquo;if\u0026rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.\nThe \u0026ldquo;if\u0026rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of \u0026ldquo;code for today,\u0026rdquo; too.\nLet\u0026rsquo;s assume, though, that we\u0026rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we\u0026rsquo;re going to create a section template.\nLet\u0026rsquo;s restore the default single template before we forget.\n$ mkdir themes/zafta/layouts/post $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Now we\u0026rsquo;ll update the post\u0026rsquo;s version of the single template. If you remember Hugo\u0026rsquo;s rules, the template engine will use this version over the default.\n$ vi themes/zafta/layouts/post/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn\u0026rsquo;t.\nDon\u0026rsquo;t Repeat Yourself #  DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you\u0026rsquo;re figuring that out, accept that you\u0026rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it\u0026rsquo;s okay to delay splitting up a template. */\n"},{"id":14,"href":"/posts/migrate-from-jekyll/","title":"Migrate to Hugo from Jekyll","section":"Posts","content":"Move static content to static #  Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like\n▾ \u0026lt;root\u0026gt;/ ▾ images/ logo.png  should become\n▾ \u0026lt;root\u0026gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you\u0026rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.\nCreate your Hugo configuration file #  Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details.\nSet your configuration publish folder to _site #  The default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you\u0026rsquo;ll want to do one of two alternatives:\n  Change your submodule to point to map gh-pages to public instead of _site (recommended).\n git submodule deinit _site git rm _site git submodule add -b gh-pages git@github.com:your-username/your-repo.git public    Or, change the Hugo configuration to use _site instead of public.\n { .. \u0026quot;publishdir\u0026quot;: \u0026quot;_site\u0026quot;, .. }    Convert Jekyll templates to Hugo templates #  That\u0026rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to Jekyll\u0026rsquo;s template documentation if you need to refresh your memory on how you built your blog and Hugo\u0026rsquo;s template to learn Hugo\u0026rsquo;s way.\nAs a single reference data point, converting my templates for heyitsalex.net took me no more than a few hours.\nConvert Jekyll plugins to Hugo shortcodes #  Jekyll has plugins; Hugo has shortcodes. It\u0026rsquo;s fairly trivial to do a port.\nImplementation #  As an example, I was using a custom image_tag plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.\nJekyll\u0026rsquo;s plugin:\nmodule Jekyll class ImageTag \u0026lt; Liquid::Tag @url = nil @caption = nil @class = nil @link = nil // Patterns IMAGE_URL_WITH_CLASS_AND_CAPTION = IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;(\\s+)-\u0026gt;((https?:\\/\\/|\\/)(\\S+))(\\s*)/i IMAGE_URL_WITH_CAPTION = /((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;/i IMAGE_URL_WITH_CLASS = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))/i IMAGE_URL = /((https?:\\/\\/|\\/)(\\S+))/i def initialize(tag_name, markup, tokens) super if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK @class = $1 @url = $3 @caption = $7 @link = $9 elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION @class = $1 @url = $3 @caption = $7 elsif markup =~ IMAGE_URL_WITH_CAPTION @url = $1 @caption = $5 elsif markup =~ IMAGE_URL_WITH_CLASS @class = $1 @url = $3 elsif markup =~ IMAGE_URL @url = $1 end end def render(context) if @class source = \u0026quot;\u0026lt;figure class='#{@class}'\u0026gt;\u0026quot; else source = \u0026quot;\u0026lt;figure\u0026gt;\u0026quot; end if @link source += \u0026quot;\u0026lt;a href=\\\u0026quot;#{@link}\\\u0026quot;\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;img src=\\\u0026quot;#{@url}\\\u0026quot;\u0026gt;\u0026quot; if @link source += \u0026quot;\u0026lt;/a\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;figcaption\u0026gt;#{@caption}\u0026lt;/figcaption\u0026gt;\u0026quot; if @caption source += \u0026quot;\u0026lt;/figure\u0026gt;\u0026quot; source end end end Liquid::Template.register_tag('image', Jekyll::ImageTag)  is written as this Hugo shortcode:\n\u0026lt;!-- image --\u0026gt; \u0026lt;figure {{ with .Get \u0026quot;class\u0026quot; }}class=\u0026quot;{{.}}\u0026quot;{{ end }}\u0026gt; {{ with .Get \u0026quot;link\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt;{{ end }} \u0026lt;img src=\u0026quot;{{ .Get \u0026quot;src\u0026quot; }}\u0026quot; {{ if or (.Get \u0026quot;alt\u0026quot;) (.Get \u0026quot;caption\u0026quot;) }}alt=\u0026quot;{{ with .Get \u0026quot;alt\u0026quot;}}{{.}}{{else}}{{ .Get \u0026quot;caption\u0026quot; }}{{ end }}\u0026quot;{{ end }} /\u0026gt; {{ if .Get \u0026quot;link\u0026quot;}}\u0026lt;/a\u0026gt;{{ end }} {{ if or (or (.Get \u0026quot;title\u0026quot;) (.Get \u0026quot;caption\u0026quot;)) (.Get \u0026quot;attr\u0026quot;)}} \u0026lt;figcaption\u0026gt;{{ if isset .Params \u0026quot;title\u0026quot; }} {{ .Get \u0026quot;title\u0026quot; }}{{ end }} {{ if or (.Get \u0026quot;caption\u0026quot;) (.Get \u0026quot;attr\u0026quot;)}}\u0026lt;p\u0026gt; {{ .Get \u0026quot;caption\u0026quot; }} {{ with .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt; {{ end }} {{ .Get \u0026quot;attr\u0026quot; }} {{ if .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;/a\u0026gt; {{ end }} \u0026lt;/p\u0026gt; {{ end }} \u0026lt;/figcaption\u0026gt; {{ end }} \u0026lt;/figure\u0026gt; \u0026lt;!-- image --\u0026gt;  Usage #  I simply changed:\n{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg \u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were \u0026quot;having fun\u0026quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; -\u0026gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}  to this (this example uses a slightly extended version named fig, different than the built-in figure):\n{{% fig class=\u0026quot;full\u0026quot; src=\u0026quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg\u0026quot; title=\u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; link=\u0026quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/\u0026quot; %}}  As a bonus, the shortcode named parameters are, arguably, more readable.\nFinishing touches #  Fix content #  Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that hugo server --watch is your friend. Test your changes and fix errors as needed.\nClean up #  You\u0026rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn\u0026rsquo;t used, delete it.\nA practical example in a diff #  Hey, it\u0026rsquo;s Alex was migrated in less than a father-with-kids day from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this diff.\n"},{"id":15,"href":"/docs/example/table-of-contents/","title":"算法练习","section":"首页","content":"C语言在线编程工具 #  "},{"id":16,"href":"/graph/","title":"Graph","section":"DataStr","content":"clock函数的使用 #  "},{"id":17,"href":"/posts/goisforlovers/","title":"(Hu)go Template Primer","section":"Posts","content":"Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.\nThis document is a brief primer on using Go templates. The Go docs provide more details.\nIntroduction to Go Templates #  Go templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that Go templates parse very quickly.\nA unique characteristic of Go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the Go docs.\nBasic Syntax #  Golang templates are HTML files with the addition of variables and functions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable \u0026ldquo;foo\u0026rdquo;:\n{{ foo }}  Parameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }}  Methods and fields are accessed via dot notation\nAccessing the Page Parameter \u0026ldquo;bar\u0026rdquo;\n{{ .Params.bar }}  Parentheses can be used to group items together\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }}  Variables #  Each Go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.\nA variable is accessed by referencing the variable name.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt;  Variables can also be defined and referenced.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}} {{ $address }}  Functions #  Go template ship with a few functions which provide basic functionality. The Go template system also provides a mechanism for applications to extend the available functions with their own. Hugo template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling hugo.\nExample:\n{{ add 1 2 }}  Includes #  When including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Hugo.\nExample:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }}  Logic #  Go templates provide the most basic iteration and conditional logic.\nIteration #  Just like in Go, the Go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range.\nExample 1: Using Context\n{{ range array }} {{ . }} {{ end }}  Example 2: Declaring value variable name\n{{range $element := array}} {{ $element }} {{ end }}  Example 2: Declaring key and value variable name\n{{range $index, $element := array}} {{ $index }} {{ $element }} {{ end }}  Conditionals #  If, else, with, or, \u0026amp; and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end.\nGo Templates treat the following values as false:\n false 0 any array, slice, map, or string of length zero  Example 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }}  Example 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{else}} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }}  Example 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}}  Example 4: With\nAn alternative way of writing \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent.\nThe first example above could be simplified as:\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }}  Example 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{ else if isset .Params \u0026quot;caption\u0026quot; }} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }}  Pipes #  One of the most powerful components of Go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline\u0026rsquo;s output becomes the input of the following pipe.\nBecause of the very simple syntax of Go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1 :\n{{ if eq 1 1 }} Same {{ end }}  is the same as\n{{ eq 1 1 | if }} Same {{ end }}  It does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes.\nExample 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }}  Access the page parameter called \u0026ldquo;disqus_url\u0026rdquo; and escape the HTML.\nExample 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Stuff Here {{ end }}  Could be rewritten as\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; | or isset .Params \u0026quot;attr\u0026quot; | if }} Stuff Here {{ end }}  Context (aka. the dot) #  The most easily overlooked concept to understand about Go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context.\nExample:\n {{ $title := .Site.Title }} {{ range .Params.tags }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt; {{ end }}  Notice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop.\nHugo Parameters #  Hugo provides the option of passing values to the template language through the site configuration (for sitewide values), or through the meta data of each specific piece of content. You can define any values of any type (supported by your front matter/config format) and use them however you want to inside of your templates.\nUsing Content (page) Parameters #  In each piece of content you can provide variables to be used by the templates. This happens in the front matter.\nAn example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn\u0026rsquo;t make a lot of sense. We\u0026rsquo;ve defined a variable in our front matter of some pages to turn off the TOC from being displayed.\nHere is the example front matter:\n--- title: \u0026quot;Permalinks\u0026quot; date: \u0026quot;2013-11-18\u0026quot; aliases: - \u0026quot;/doc/permalinks/\u0026quot; groups: [\u0026quot;extras\u0026quot;] groups_weight: 30 notoc: true --- Here is the corresponding code inside of the template:\n {{ if not .Params.notoc }} \u0026lt;div id=\u0026quot;toc\u0026quot; class=\u0026quot;well col-md-4 col-sm-6\u0026quot;\u0026gt; {{ .TableOfContents }} \u0026lt;/div\u0026gt; {{ end }}  Using Site (config) Parameters #  In your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome.\nFor instance, you might declare:\nparams: CopyrightHTML: \u0026#34;Copyright \u0026amp;#xA9; 2013 John Doe. All Rights Reserved.\u0026#34; TwitterUser: \u0026#34;spf13\u0026#34; SidebarRecentLimit: 5 Within a footer layout, you might then declare a \u0026lt;footer\u0026gt; which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates.\n{{if .Site.Params.CopyrightHTML}}\u0026lt;footer\u0026gt; \u0026lt;div class=\u0026quot;text-center\u0026quot;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt;{{end}} An alternative way of writing the \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent:\n{{with .Site.Params.TwitterUser}}\u0026lt;span class=\u0026quot;twitter\u0026quot;\u0026gt; \u0026lt;a href=\u0026quot;https://twitter.com/{{.}}\u0026quot; rel=\u0026quot;author\u0026quot;\u0026gt; \u0026lt;img src=\u0026quot;/images/twitter.png\u0026quot; width=\u0026quot;48\u0026quot; height=\u0026quot;48\u0026quot; title=\u0026quot;Twitter: {{.}}\u0026quot; alt=\u0026quot;Twitter\u0026quot;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt;{{end}} Finally, if you want to pull \u0026ldquo;magic constants\u0026rdquo; out of your layouts, you can do so, such as in this example:\n\u0026lt;nav class=\u0026quot;recent\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;{{.RelPermalink}}\u0026quot;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{end}}\u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; "},{"id":18,"href":"/posts/hugoisforlovers/","title":"Getting Started with Hugo","section":"Posts","content":"Step 1. Install Hugo #  Go to Hugo releases and download the appropriate version for your OS and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at Install Hugo\nStep 2. Build the Docs #  Hugo has its own example site which happens to also be the documentation site you are reading right now.\nFollow the following steps:\n Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:\ngit clone https://github.com/spf13/hugo cd hugo /path/to/where/you/installed/hugo server --source=./docs \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Press ctrl+c to stop  Once you\u0026rsquo;ve gotten here, follow along the rest of this page on your local build.\nStep 3. Change the docs site #  Stop the Hugo process by hitting Ctrl+C.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Watching for changes in /Users/spf13/Code/hugo/docs/content \u0026gt; Press ctrl+c to stop  Open your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n\u0026gt; Change detected, rebuilding site \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 26 ms  Refresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it\u0026rsquo;s finished building. I double dare you. Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.\nStep 4. Have fun #  The best way to learn something is to play with it.\n"},{"id":19,"href":"/docs/example/hidden/","title":"Hidden","section":"首页","content":"This page is hidden in menu #  Quondam non pater est dignior ille Eurotas #  Latent te facies #  Lorem markdownum arma ignoscas vocavit quoque ille texit mandata mentis ultimus, frementes, qui in vel. Hippotades Peleus pennas conscia cuiquam Caeneus quas.\n Pater demittere evincitque reddunt Maxime adhuc pressit huc Danaas quid freta Soror ego Luctus linguam saxa ultroque prior Tatiumque inquit Saepe liquitur subita superata dederat Anius sudor  Cum honorum Latona #  O fallor in sustinui iussorum equidem. Nymphae operi oris alii fronde parens dumque, in auro ait mox ingenti proxima iamdudum maius?\nreality(burnDocking(apache_nanometer), pad.property_data_programming.sectorBrowserPpga(dataMask, 37, recycleRup)); intellectualVaporwareUser += -5 * 4; traceroute_key_upnp /= lag_optical(android.smb(thyristorTftp)); surge_host_golden = mca_compact_device(dual_dpi_opengl, 33, commerce_add_ppc); if (lun_ipv) { verticalExtranet(1, thumbnail_ttl, 3); bar_graphics_jpeg(chipset - sector_xmp_beta); }  Fronde cetera dextrae sequens pennis voce muneris #  Acta cretus diem restet utque; move integer, oscula non inspirat, noctisque scelus! Nantemque in suas vobis quamvis, et labori!\nvar runtimeDiskCompiler = home - array_ad_software; if (internic \u0026gt; disk) { emoticonLockCron += 37 + bps - 4; wan_ansi_honeypot.cardGigaflops = artificialStorageCgi; simplex -= downloadAccess; } var volumeHardeningAndroid = pixel + tftp + onProcessorUnmount; sector(memory(firewire + interlaced, wired)); "},{"id":20,"href":"/docs/example/collapsed/3rd-level/","title":"1","section":"website","content":"/home/wfsias/DSW/content/docs/example/collapsed/3rd-level/_index.md #  "},{"id":21,"href":"/docs/example/collapsed/3rd-level/4th-level/","title":"2","section":"1","content":"/home/wfsias/DSW/content/docs/example/collapsed/3rd-level/4th-level.md #  "},{"id":22,"href":"/docs/shortcodes/section/","title":"Chapter 9：排序","section":"Shortcodes","content":"/home/wfsias/DSW/content/docs/shortcodes/section/_index.md #  "}]